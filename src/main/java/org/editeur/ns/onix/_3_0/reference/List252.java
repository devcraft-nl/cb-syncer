//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2025.05.27 at 10:08:36 AM CEST 
//


package org.editeur.ns.onix._3_0.reference;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for List252.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="List252"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="A410"/&gt;
 *     &lt;enumeration value="A411"/&gt;
 *     &lt;enumeration value="A412"/&gt;
 *     &lt;enumeration value="A413"/&gt;
 *     &lt;enumeration value="A414"/&gt;
 *     &lt;enumeration value="A415"/&gt;
 *     &lt;enumeration value="A416"/&gt;
 *     &lt;enumeration value="A417"/&gt;
 *     &lt;enumeration value="A418"/&gt;
 *     &lt;enumeration value="A419"/&gt;
 *     &lt;enumeration value="A420"/&gt;
 *     &lt;enumeration value="A421"/&gt;
 *     &lt;enumeration value="A422"/&gt;
 *     &lt;enumeration value="A423"/&gt;
 *     &lt;enumeration value="A441"/&gt;
 *     &lt;enumeration value="A451"/&gt;
 *     &lt;enumeration value="B001"/&gt;
 *     &lt;enumeration value="B002"/&gt;
 *     &lt;enumeration value="B003"/&gt;
 *     &lt;enumeration value="B004"/&gt;
 *     &lt;enumeration value="B005"/&gt;
 *     &lt;enumeration value="B006"/&gt;
 *     &lt;enumeration value="B010"/&gt;
 *     &lt;enumeration value="B011"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "List252")
@XmlEnum
public enum List252 {


    /**
     * Includes ‘stereo’ where channels are identical
     * 
     */
    @XmlEnumValue("A410")
    A_410("A410"),
    @XmlEnumValue("A411")
    A_411("A411"),

    /**
     *  44,100 samples per channel per second (CD-quality)
     * 
     */
    @XmlEnumValue("A412")
    A_412("A412"),
    @XmlEnumValue("A413")
    A_413("A413"),
    @XmlEnumValue("A414")
    A_414("A414"),
    @XmlEnumValue("A415")
    A_415("A415"),

    /**
     * Bit depth, 16 bits per sample (CD-quality)
     * 
     */
    @XmlEnumValue("A416")
    A_416("A416"),
    @XmlEnumValue("A417")
    A_417("A417"),
    @XmlEnumValue("A418")
    A_418("A418"),
    @XmlEnumValue("A419")
    A_419("A419"),

    /**
     * Includes ‘joint stereo’
     * 
     */
    @XmlEnumValue("A420")
    A_420("A420"),
    @XmlEnumValue("A421")
    A_421("A421"),

    /**
     * Includes v1.1
     * 
     */
    @XmlEnumValue("A422")
    A_422("A422"),
    @XmlEnumValue("A423")
    A_423("A423"),

    /**
     * Five-channel audio (including low-frequency channel)
     * 
     */
    @XmlEnumValue("A441")
    A_441("A441"),

    /**
     * Six-channel audio (including low-frequency channel)
     * 
     */
    @XmlEnumValue("A451")
    A_451("A451"),
    @XmlEnumValue("B001")
    B_001("B001"),

    /**
     * If page size of the resource file is not equal to final trimmed page size of the product (in <Measure>, then text or image area should be centered on final pages. Note that content may not bleed to the trimmed page edge
     * 
     */
    @XmlEnumValue("B002")
    B_002("B002"),
    @XmlEnumValue("B003")
    B_003("B003"),

    /**
     * Two pages in the resource file represent a single page in the product
     * 
     */
    @XmlEnumValue("B004")
    B_004("B004"),
    @XmlEnumValue("B005")
    B_005("B005"),

    /**
     * For example, preseparated CMYK
     * 
     */
    @XmlEnumValue("B006")
    B_006("B006"),
    @XmlEnumValue("B010")
    B_010("B010"),
    @XmlEnumValue("B011")
    B_011("B011");
    private final String value;

    List252(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static List252 fromValue(String v) {
        for (List252 c: List252 .values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
